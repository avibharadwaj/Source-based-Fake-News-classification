{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Final Word2Vec","provenance":[],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyOAPetIRHQD5fSJKvZSZnx/"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"8HRxCMyZY8U1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1592761915805,"user_tz":-330,"elapsed":31353,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"584cd350-aea3-4e87-be9f-6b99165d5617"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ERmLzX20izGj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":394},"executionInfo":{"status":"ok","timestamp":1592761924630,"user_tz":-330,"elapsed":40149,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"e5ceb225-eaef-48ac-a973-d58ad9db8438"},"source":["import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","from sklearn import model_selection\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import StratifiedKFold\n","import os\n","import nltk\n","import gensim\n","nltk.download('stopwords')\n","!pip install smart_open\n","!pip install requests\n","import smart_open\n","from gensim.test.utils import datapath\n","from smart_open import open"],"execution_count":2,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","Requirement already satisfied: smart_open in /usr/local/lib/python3.6/dist-packages (2.0.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from smart_open) (2.23.0)\n","Requirement already satisfied: boto in /usr/local/lib/python3.6/dist-packages (from smart_open) (2.49.0)\n","Requirement already satisfied: boto3 in /usr/local/lib/python3.6/dist-packages (from smart_open) (1.14.2)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->smart_open) (2020.4.5.2)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->smart_open) (2.9)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->smart_open) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->smart_open) (1.24.3)\n","Requirement already satisfied: botocore<1.18.0,>=1.17.2 in /usr/local/lib/python3.6/dist-packages (from boto3->smart_open) (1.17.2)\n","Requirement already satisfied: jmespath<1.0.0,>=0.7.1 in /usr/local/lib/python3.6/dist-packages (from boto3->smart_open) (0.10.0)\n","Requirement already satisfied: s3transfer<0.4.0,>=0.3.0 in /usr/local/lib/python3.6/dist-packages (from boto3->smart_open) (0.3.3)\n","Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.6/dist-packages (from botocore<1.18.0,>=1.17.2->boto3->smart_open) (2.8.1)\n","Requirement already satisfied: docutils<0.16,>=0.10 in /usr/local/lib/python3.6/dist-packages (from botocore<1.18.0,>=1.17.2->boto3->smart_open) (0.15.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil<3.0.0,>=2.1->botocore<1.18.0,>=1.17.2->boto3->smart_open) (1.12.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (2.23.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests) (2020.4.5.2)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests) (2.9)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tnCa6v8qitpX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":88},"executionInfo":{"status":"ok","timestamp":1592762032721,"user_tz":-330,"elapsed":148220,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"17591dfd-d026-473a-f9e8-e5b71ef39f49"},"source":["from gensim.models import KeyedVectors\n","from gensim.models import Word2Vec\n","import tweepy\n","import requests\n","import tensorflow \n","word2vec_path = 'https://s3.amazonaws.com/dl4j-distribution/GoogleNews-vectors-negative300.bin.gz'\n","\n","embeddings = KeyedVectors.load_word2vec_format(word2vec_path,binary=True)\n","print(embeddings)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/smart_open/smart_open_lib.py:253: UserWarning: This function is deprecated, use smart_open.open instead. See the migration notes for details: https://github.com/RaRe-Technologies/smart_open/blob/master/README.rst#migrating-to-the-new-open-function\n","  'See the migration notes for details: %s' % _MIGRATION_NOTES_URL\n"],"name":"stderr"},{"output_type":"stream","text":["<gensim.models.keyedvectors.Word2VecKeyedVectors object at 0x7f97a10176a0>\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QKGe4YTdp2Tx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1592762032725,"user_tz":-330,"elapsed":148203,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"5c4d9ee3-e14b-4c1b-d304-11447c9a226f"},"source":["data = pd.read_csv('/content/drive/My Drive/final_output1.csv',encoding='latin1',usecols=['text_without_stopwords','type'])\n","data.head()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>type</th>\n","      <th>text_without_stopwords</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>bias</td>\n","      <td>print pay back money plus interest entire fami...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>bias</td>\n","      <td>attorney general loretta lynch plead fifth ba...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>bias</td>\n","      <td>red state fox news sunday reported morning ant...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>bias</td>\n","      <td>email kayla mueller prisoner tortured isis cha...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>bias</td>\n","      <td>email healthcare reform make america great sin...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   type                             text_without_stopwords\n","0  bias  print pay back money plus interest entire fami...\n","1  bias   attorney general loretta lynch plead fifth ba...\n","2  bias  red state fox news sunday reported morning ant...\n","3  bias  email kayla mueller prisoner tortured isis cha...\n","4  bias  email healthcare reform make america great sin..."]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"ZjyX4Pftq_XO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1592762032727,"user_tz":-330,"elapsed":148184,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"f98ae385-cb12-448e-9ee0-3f45ba7c19de"},"source":["data = data.sample(frac=1)\n","data = data.dropna()\n","data.head()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>type</th>\n","      <th>text_without_stopwords</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>957</th>\n","      <td>bs</td>\n","      <td>morgen neu kiosk postillon sonntag außerdem di...</td>\n","    </tr>\n","    <tr>\n","      <th>102</th>\n","      <td>bs</td>\n","      <td>second video bottom one proves trump sayng tr...</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>conspiracy</td>\n","      <td>st century wire says imagine nations like chin...</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>bias</td>\n","      <td>john mcnaughton special american painter subje...</td>\n","    </tr>\n","    <tr>\n","      <th>420</th>\n","      <td>bs</td>\n","      <td>amanda taub new york times november call crisi...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           type                             text_without_stopwords\n","957          bs  morgen neu kiosk postillon sonntag außerdem di...\n","102          bs   second video bottom one proves trump sayng tr...\n","49   conspiracy  st century wire says imagine nations like chin...\n","17         bias  john mcnaughton special american painter subje...\n","420          bs  amanda taub new york times november call crisi..."]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"q3Y4gZgAray0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1592762032729,"user_tz":-330,"elapsed":148160,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"6e8cd1dd-1c23-499e-9aa9-ef5659ef7ac3"},"source":["data.loc[11, 'text_without_stopwords']"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'students expressed fear trump presidency messages shared twitter today literally scared lives new literally hitler notmypresident pictwittercomckfqdfce paul joseph watson prisonplanet november finally ridiculous totally biased email sent university michigan president students offering assistance help results presidential election last night president wants ensure students university remains committed important responsibility school apparently remain committed education discovery intellectual honesty diversity equity inclusion members university community im sure many watched election coverage late night opportunity visit students staff resultswatching event sponsored ginsberg center michigan union take quite time completely absorb results yesterdays election understand full implications discern longterm impact university nation immediately aftermath close highly contentious election continue embrace important responsibility university community responsibility remain committed education discovery intellectual honesty diversity equity inclusion best come together engage respectfully across ideological differences support feel marginalized threatened unwelcome pursue knowledge understanding always students faculty staff university michigan reports members community offering support one another students planning vigil tonight diag pm center research teaching learning also numerous resources available faculty seeking help cultivating classroom environments responsive national issues also want make everyone aware plans events place today beyond gerald r ford school public policy holding postelection analysis pm today weill halls annenberg auditorium speakers include former us congressman john dingell former ambassador ron weiser faculty members mara ostfeld betsey stevenson marina whitman history department organized community discussion led faculty students include historical perspectives pm tonight tisch hall office student life provide resources referrals support campus students faculty staff location michigan unions willis ward lounge open today pm office multiethnic student affairs offering open space support help members community connect open hours today mesas office michigan union room tomorrow ginsberg center counseling psychological services office facilitating postelection dialogue impact perspectivetaking moving forward event part student life professional development conference pm michigan leagues henderson room know schools colleges offices across campus planning events well thank everyone helping us come together ask anyone scheduling post election event post university michigan events calendar hope us continue proudly embrace opportunities us students faculty staff great public research university governed people elections often times great change values stand um shaped course nearly years mission remains essential society ever serve people michigan world preeminence creating communicating preserving applying knowledge art academic values developing leaders citizens challenge present enrich future look forward working together advance work service public ensure university michigan always welcoming place members society sincerely mark schlissel president'"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"bfAZi9cDrr34","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"status":"ok","timestamp":1592763077242,"user_tz":-330,"elapsed":1192633,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"7049e390-2478-4f53-934f-26955633213d"},"source":["docs_vectors = pd.DataFrame() # creating empty final dataframe\n","stopwords = nltk.corpus.stopwords.words('english') # removing stop words\n","for doc in data['text_without_stopwords'].str.lower().str.replace('[^a-z ]', ''): # looping through each document and cleaning it\n","    temp = pd.DataFrame()  # creating a temporary dataframe(store value for 1st doc & for 2nd doc remove the details of 1st & proced through 2nd and so on..)\n","    #print(type(doc))\n","    for word in str(doc).split(' '): # looping through each word of a single document and spliting through space\n","        #if word not in stopwords: # if word is not present in stopwords then (try)\n","        try:\n","            word_vec = embeddings[word] # if word is present in embeddings(goole provides weights associate with words(300)) then proceed\n","            temp = temp.append(pd.Series(word_vec), ignore_index = True) # if word is present then append it to temporary dataframe\n","        except:\n","            pass\n","    doc_vector = temp.mean() # take the average of each column(w0, w1, w2,........w300)\n","    docs_vectors = docs_vectors.append(doc_vector, ignore_index = True) # append each document value to the final dataframe\n","docs_vectors.shape\n","print(docs_vectors)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["           0         1         2    ...       297       298       299\n","0     0.181974 -0.020499 -0.012597  ... -0.046887  0.057825  0.132707\n","1     0.017665  0.073985  0.026498  ... -0.178738  0.007691  0.051037\n","2    -0.003180  0.032843  0.014047  ...  0.012643  0.001956  0.040020\n","3     0.062915  0.051644  0.005008  ... -0.073387  0.025525 -0.026333\n","4     0.030389  0.032959  0.008796  ... -0.035611  0.058428 -0.003381\n","...        ...       ...       ...  ...       ...       ...       ...\n","2043 -0.000645  0.038497  0.025786  ... -0.083824  0.003507  0.056466\n","2044  0.068303  0.066613  0.005058  ... -0.008381  0.004141  0.061045\n","2045  0.037231  0.032361  0.078461  ... -0.088849  0.045817  0.033386\n","2046  0.039989  0.026516 -0.009485  ... -0.050902  0.026479  0.068782\n","2047  0.024486  0.045860  0.022544  ... -0.042783  0.022409  0.037937\n","\n","[2048 rows x 300 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"j9jP3QoDs2A2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592763077259,"user_tz":-330,"elapsed":1192616,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"f07de674-55f0-4539-ec02-de2e2c98b763"},"source":["pd.isnull(docs_vectors).sum().sum()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["300"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"nQunti8Is36P","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592763077261,"user_tz":-330,"elapsed":1192610,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}}},"source":["docs_vectors['text_without_stopwords'] = data['type']\n","docs_vectors = docs_vectors.dropna()"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"oyMxvmdBum5s","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592763077266,"user_tz":-330,"elapsed":1192581,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"46b58d63-a6e8-456f-9e71-03c7bbf790e0"},"source":["from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import AdaBoostClassifier\n","\n","train_x, test_x, train_y, test_y = train_test_split(docs_vectors.drop('text_without_stopwords', axis = 1),\n","                                                   docs_vectors['text_without_stopwords'],\n","                                                   test_size = 0.30,\n","                                                   random_state = 42)\n","train_x.shape, train_y.shape, test_x.shape, test_y.shape"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1432, 300), (1432,), (615, 300), (615,))"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"1vTPLIBGwoK_","colab_type":"text"},"source":["Adaboost:"]},{"cell_type":"code","metadata":{"id":"Zhlx0_Gnuuqa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592763168507,"user_tz":-330,"elapsed":1283796,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"af655b75-cb1e-40ee-eedb-9ce45ec8ebf7"},"source":["from sklearn.tree import DecisionTreeClassifier\n","#print(train_y)\n","model = AdaBoostClassifier(DecisionTreeClassifier(max_depth = 7),n_estimators=300, random_state = 1)\n","model.fit(train_x, train_y)\n","test_pred = model.predict(test_x)\n","from sklearn.metrics import accuracy_score\n","accuracy_score(test_y, test_pred)"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.28780487804878047"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"Tjlbj0IMwsoh","colab_type":"text"},"source":["Naive Bayes:"]},{"cell_type":"code","metadata":{"id":"2WkQmbNcw16X","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"error","timestamp":1592763168517,"user_tz":-330,"elapsed":1283800,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"6a30c00d-a8c4-4f4f-cb0c-75256e592653"},"source":["from sklearn.naive_bayes import MultinomialNB\n","from sklearn import metrics\n","\n","clf = MultinomialNB() \n","clf.fit(train_x, train_y)                       # Fit Naive Bayes classifier according to X, y\n","pred = clf.predict(test_x)                     # Perform classification on an array of test vectors X.\n","print(pred)\n","type(test_x)\n","NBscore = metrics.accuracy_score(test_y, pred)\n","print(\"accuracy:   %0.3f\" % NBscore)\n","cm = metrics.confusion_matrix(test_y, pred)\n","print(cm)"],"execution_count":12,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-ba98a6a13494>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMultinomialNB\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_y\u001b[0m\u001b[0;34m)\u001b[0m                       \u001b[0;31m# Fit Naive Bayes classifier according to X, y\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_x\u001b[0m\u001b[0;34m)\u001b[0m                     \u001b[0;31m# Perform classification on an array of test vectors X.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/naive_bayes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    633\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    634\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_init_counters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_effective_classes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_features\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 635\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    636\u001b[0m         \u001b[0malpha\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_alpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_feature_log_prob\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/naive_bayes.py\u001b[0m in \u001b[0;36m_count\u001b[0;34m(self, X, Y)\u001b[0m\n\u001b[1;32m    754\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    755\u001b[0m         \u001b[0;34m\"\"\"Count and smooth feature occurrences.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 756\u001b[0;31m         \u001b[0mcheck_non_negative\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"MultinomialNB (input X)\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    757\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature_count_\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0msafe_sparse_dot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    758\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_count_\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_non_negative\u001b[0;34m(X, whom)\u001b[0m\n\u001b[1;32m    992\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    993\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mX_min\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 994\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Negative values in data passed to %s\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mwhom\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    995\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    996\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Negative values in data passed to MultinomialNB (input X)"]}]},{"cell_type":"markdown","metadata":{"id":"tMOG9XG6wAPf","colab_type":"text"},"source":["Random Forest:"]},{"cell_type":"code","metadata":{"id":"c2rQfyQLwDb_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592763181024,"user_tz":-330,"elapsed":2570,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"b2cddb98-f58f-4536-bf71-6f2fa20aec88"},"source":["from sklearn.ensemble import RandomForestClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn import metrics\n","Rando= RandomForestClassifier(n_estimators=7)\n","Rando.fit(train_x,train_y)\n","y_pred1=Rando.predict(test_x)\n","RFscore=metrics.accuracy_score(test_y,y_pred1)\n","print(\"accuracy:  %0.3f\" %RFscore)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["accuracy:  0.234\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_shtSutV8Q6H","colab_type":"text"},"source":["SVM:"]},{"cell_type":"code","metadata":{"id":"VT_XzyBH8SvU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592763190200,"user_tz":-330,"elapsed":3369,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"077b7526-6fbd-47d6-d71b-bb0d8bddef42"},"source":["#Support Vector Machine\n","#fitting SVM to the training set\n","from sklearn.svm import SVC\n","classifier=SVC(kernel='linear',random_state=1)\n","classifier.fit(train_x,train_y)\n","\n","#predicting the test set results\n","y_pred=classifier.predict(test_x)\n","SVMscore=metrics.accuracy_score(test_y,y_pred)\n","#print(y_pred)\n","print(\"accuracy:  %0.3f\" %SVMscore)\n","#making the confusion matrix to see how many incorrect values are there\n","from sklearn.metrics import confusion_matrix\n","cm=confusion_matrix(test_y,y_pred)\n","#print(cm)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["accuracy:  0.302\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tWUY0n6GuxeX","colab_type":"text"},"source":["Logistic Regression:"]},{"cell_type":"code","metadata":{"id":"zbJaVNBduy6e","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"executionInfo":{"status":"ok","timestamp":1592763193554,"user_tz":-330,"elapsed":1689,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"9f6e7f9e-e1b9-4f7c-8657-21cd6d9d6f5b"},"source":["from sklearn.linear_model import LogisticRegression\n","logreg=LogisticRegression(C=1e5)\n","logreg.fit(train_x,train_y)\n","y_pred2=logreg.predict(test_x)\n","LRscore=metrics.accuracy_score(test_y,y_pred2)\n","print(\"accuracy:  %0.3f\" %LRscore)\n","# print(y_pred2)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["accuracy:  0.200\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"bwjW9oXS09ZE","colab_type":"text"},"source":["Using KFold (LR) :"]},{"cell_type":"code","metadata":{"id":"xCleXu3f0tpA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":88},"executionInfo":{"status":"ok","timestamp":1592763204494,"user_tz":-330,"elapsed":3968,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"b0eb1820-7e68-43e5-894f-b3aa0d8fe286"},"source":["kfold = model_selection.KFold(n_splits=10, random_state=100)\n","model_kfold = LogisticRegression()\n","results_kfold = model_selection.cross_val_score(model_kfold, train_x, train_y, cv=kfold)\n","print(\"Accuracy: %.2f%%\" % (results_kfold.mean()*100.0))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"stream","text":["Accuracy: 27.30%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MJK_aQsM2Fvg","colab_type":"text"},"source":["Using Stratified K-Fold (LR) :"]},{"cell_type":"code","metadata":{"id":"acQ5rzp_2Kb1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":88},"executionInfo":{"status":"ok","timestamp":1592763207683,"user_tz":-330,"elapsed":1333,"user":{"displayName":"BRINDA ASHAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiwZD1AZ_YEUHVo-e99uGC8YcoSz46lqZTxT7HJ=s64","userId":"11120398684014141102"}},"outputId":"f8b6ba15-93e9-4ea3-ab26-c5672bf73a28"},"source":["skfold = StratifiedKFold(n_splits=3, random_state=100)\n","model_skfold = LogisticRegression()\n","results_skfold = model_selection.cross_val_score(model_skfold, train_x, train_y, cv=skfold)\n","print(\"Accuracy: %.2f%%\" % (results_skfold.mean()*100.0))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"stream","text":["Accuracy: 27.03%\n"],"name":"stdout"}]}]}